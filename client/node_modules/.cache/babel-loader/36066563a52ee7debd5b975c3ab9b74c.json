{"ast":null,"code":"var _jsxFileName = \"/Users/tmathena/bootcamp/Projects/wolf-pack/client/src/components/Tundra/index.js\";\nimport React from \"react\";\nimport { Container } from \"shards-react\";\nimport ItemCard from \"../ItemCard\";\nimport \"./styles.css\";\n\nclass Tundra extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  getCardData() {\n    switch (this.props.currentDisplay) {\n      case \"howls\":\n        // insert database call using category in state\n\n        /*\n        API.getHowls({category: this.props.match.params.category})\n        .then(res => {\n            this.setState({\n                data: res.map(item => {\n                        return {...item, btnAction: \"Invite\", clickFn=this.inviteHowl}\n                    }\n                } \n            })\n        })\n        */\n        // dummy data instead\n        this.setState({\n          data: [{\n            id: 1,\n            img: \"\",\n            title: \"Looking for group!!!1!\",\n            body: \"ISO an airbud/electro-swing fan group. Both would be ideal, but either would work.\",\n            category: this.props.match.params.category,\n            btnAction: \"Invite\",\n            type: \"howl\"\n          }, {\n            id: 2,\n            img: \"\",\n            title: \"Looking for group!!!1!\",\n            body: \"ISO an airbud/electro-swing fan group. Both would be ideal, but either would work.\",\n            category: this.props.match.params.category,\n            btnAction: \"Invite\",\n            type: \"howl\"\n          }]\n        });\n        return null;\n\n      case \"packs\":\n        // insert database call using category in state\n\n        /*\n        API.getGroups({category: this.props.match.params.category})\n            .then(res => {\n                this.setState({\n                    data: res.map(item => {\n                            return {...item, btnAction: \"Join\", clickFn=this.joinGroup}\n                        }\n                    } \n                })\n            })\n        */\n        // dummy data instead\n        this.setState({\n          data: [{\n            id: 1,\n            img: \"\",\n            title: \"Forming Electro-Swing Band\",\n            body: \"We need a good keyboardist and of course we are always looking for other bands to practice, preform, or even just hang out with. Don't be shy!\",\n            category: this.props.match.params.category,\n            btnAction: \"Join\",\n            type: \"pack\"\n          }, {\n            id: 2,\n            img: \"\",\n            title: \"Forming Electro-Swing Band\",\n            body: \"We need a good keyboardist and of course we are always looking for other bands to practice, preform, or even just hang out with. Don't be shy!\",\n            category: this.props.match.params.category,\n            btnAction: \"Join\",\n            type: \"pack\"\n          }]\n        });\n        return null;\n\n      default: //make default page shit\n\n    }\n  }\n\n  componentDidMount() {\n    this.getCardData();\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props.currentDisplay === \"home\" ? React.createElement(\"div\", {\n      className: \"tundra-home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }) : this.state.data.map(card => {\n      return React.createElement(ItemCard, Object.assign({\n        key: card.id\n      }, card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}\n\nexport default Tundra;","map":{"version":3,"sources":["/Users/tmathena/bootcamp/Projects/wolf-pack/client/src/components/Tundra/index.js"],"names":["React","Container","ItemCard","Tundra","Component","state","data","getCardData","props","currentDisplay","setState","id","img","title","body","category","match","params","btnAction","type","componentDidMount","render","map","card"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAO,cAAP;;AAEA,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACNC,MAAAA,IAAI,EAAE;AADA,KAD2B;AAAA;;AAKnCC,EAAAA,WAAW,GAAG;AACZ,YAAQ,KAAKC,KAAL,CAAWC,cAAnB;AACE,WAAK,OAAL;AACE;;AAEA;;;;;;;;;;;AAYA;AACA,aAAKC,QAAL,CAAc;AACZJ,UAAAA,IAAI,EAAE,CACJ;AACEK,YAAAA,EAAE,EAAE,CADN;AAEEC,YAAAA,GAAG,EAAE,EAFP;AAGEC,YAAAA,KAAK,EAAE,wBAHT;AAIEC,YAAAA,IAAI,EACF,oFALJ;AAMEC,YAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBF,QANpC;AAOEG,YAAAA,SAAS,EAAE,QAPb;AAQEC,YAAAA,IAAI,EAAE;AARR,WADI,EAWJ;AACER,YAAAA,EAAE,EAAE,CADN;AAEEC,YAAAA,GAAG,EAAE,EAFP;AAGEC,YAAAA,KAAK,EAAE,wBAHT;AAIEC,YAAAA,IAAI,EACF,oFALJ;AAMEC,YAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBF,QANpC;AAOEG,YAAAA,SAAS,EAAE,QAPb;AAQEC,YAAAA,IAAI,EAAE;AARR,WAXI;AADM,SAAd;AAwBA,eAAO,IAAP;;AAEF,WAAK,OAAL;AACE;;AAEA;;;;;;;;;;;AAYA;AACA,aAAKT,QAAL,CAAc;AACZJ,UAAAA,IAAI,EAAE,CACJ;AACEK,YAAAA,EAAE,EAAE,CADN;AAEEC,YAAAA,GAAG,EAAE,EAFP;AAGEC,YAAAA,KAAK,EAAE,4BAHT;AAIEC,YAAAA,IAAI,EACF,gJALJ;AAMEC,YAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBF,QANpC;AAOEG,YAAAA,SAAS,EAAE,MAPb;AAQEC,YAAAA,IAAI,EAAE;AARR,WADI,EAWJ;AACER,YAAAA,EAAE,EAAE,CADN;AAEEC,YAAAA,GAAG,EAAE,EAFP;AAGEC,YAAAA,KAAK,EAAE,4BAHT;AAIEC,YAAAA,IAAI,EACF,gJALJ;AAMEC,YAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBF,QANpC;AAOEG,YAAAA,SAAS,EAAE,MAPb;AAQEC,YAAAA,IAAI,EAAE;AARR,WAXI;AADM,SAAd;AAwBA,eAAO,IAAP;;AAEF,cArFF,CAsFE;;AAtFF;AAwFD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKb,WAAL;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKb,KAAL,CAAWC,cAAX,KAA8B,MAA9B,GACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC,KAAKJ,KAAL,CAAWC,IAAX,CAAgBgB,GAAhB,CAAoBC,IAAI,IAAI;AAC1B,aAAO,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,IAAI,CAACZ;AAApB,SAA4BY,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KAFD,CALJ,CADF;AAYD;;AAjHkC;;AAoHrC,eAAepB,MAAf","sourcesContent":["import React from \"react\";\nimport { Container } from \"shards-react\";\nimport ItemCard from \"../ItemCard\";\nimport \"./styles.css\";\n\nclass Tundra extends React.Component {\n  state = {\n    data: []\n  };\n\n  getCardData() {\n    switch (this.props.currentDisplay) {\n      case \"howls\":\n        // insert database call using category in state\n\n        /*\n        API.getHowls({category: this.props.match.params.category})\n        .then(res => {\n            this.setState({\n                data: res.map(item => {\n                        return {...item, btnAction: \"Invite\", clickFn=this.inviteHowl}\n                    }\n                } \n            })\n        })\n        */\n\n        // dummy data instead\n        this.setState({\n          data: [\n            {\n              id: 1,\n              img: \"\",\n              title: \"Looking for group!!!1!\",\n              body:\n                \"ISO an airbud/electro-swing fan group. Both would be ideal, but either would work.\",\n              category: this.props.match.params.category,\n              btnAction: \"Invite\",\n              type: \"howl\"\n            },\n            {\n              id: 2,\n              img: \"\",\n              title: \"Looking for group!!!1!\",\n              body:\n                \"ISO an airbud/electro-swing fan group. Both would be ideal, but either would work.\",\n              category: this.props.match.params.category,\n              btnAction: \"Invite\",\n              type: \"howl\"\n            }\n          ]\n        });\n        return null;\n\n      case \"packs\":\n        // insert database call using category in state\n\n        /*\n        API.getGroups({category: this.props.match.params.category})\n            .then(res => {\n                this.setState({\n                    data: res.map(item => {\n                            return {...item, btnAction: \"Join\", clickFn=this.joinGroup}\n                        }\n                    } \n                })\n            })\n        */\n\n        // dummy data instead\n        this.setState({\n          data: [\n            {\n              id: 1,\n              img: \"\",\n              title: \"Forming Electro-Swing Band\",\n              body:\n                \"We need a good keyboardist and of course we are always looking for other bands to practice, preform, or even just hang out with. Don't be shy!\",\n              category: this.props.match.params.category,\n              btnAction: \"Join\",\n              type: \"pack\"\n            },\n            {\n              id: 2,\n              img: \"\",\n              title: \"Forming Electro-Swing Band\",\n              body:\n                \"We need a good keyboardist and of course we are always looking for other bands to practice, preform, or even just hang out with. Don't be shy!\",\n              category: this.props.match.params.category,\n              btnAction: \"Join\",\n              type: \"pack\"\n            }\n          ]\n        });\n        return null;\n\n      default:\n      //make default page shit\n    }\n  }\n\n  componentDidMount() {\n    this.getCardData();\n  }\n\n  render() {\n    return (\n      <Container>\n        {/* Add conditional logic for rendering either this.state.data in ItemCards or the home page */}\n        {this.props.currentDisplay === \"home\" ? (\n          <div className=\"tundra-home\">{/* Homepage */}</div>\n        ) : (\n          this.state.data.map(card => {\n            return <ItemCard key={card.id} {...card} />;\n          })\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default Tundra;\n"]},"metadata":{},"sourceType":"module"}